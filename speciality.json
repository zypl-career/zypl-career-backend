{
  "openapi": "3.0.0",
  "paths": {
    "/article/create": {
      "post": {
        "operationId": "ArticlesController_create",
        "summary": "Create a new article",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateArticleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Article created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Article created successfully",
                    "payload": {
                      "id": "UUID",
                      "title": "Title text",
                      "description": "Description text",
                      "image": "image url",
                      "minutesRead": 10,
                      "generalInfoFile": "General info file",
                      "hashtags": ["first", "second"],
                      "createdAt": "2024-08-10T10:26:19.373Z",
                      "updatedAt": "2024-08-10T10:26:19.373Z",
                      "deletedAt": null
                    }
                  }
                }
              }
            }
          },
          "302": {
            "description": "Article already exists",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 302,
                    "message": "Article already exists"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "title": ["Title must be a string"],
                    "image": ["Image is required"],
                    "description": ["Description is required"],
                    "minutesRead": ["Minutes read must be a number"],
                    "hashtags": ["Hashtags must be an array"]
                  }
                }
              }
            }
          }
        },
        "tags": ["article"]
      }
    },
    "/article/get/{id}": {
      "get": {
        "operationId": "ArticlesController_getArticle",
        "summary": "Get article by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Article ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "123",
                    "title": "Article Title",
                    "image": "https://example.com/image.jpg",
                    "description": "This is a description of the article.",
                    "minutesRead": 5,
                    "generalInfoFile": "media/articles-info/article.txt",
                    "hashtags": ["tech", "news"],
                    "createdAt": 1622548800000,
                    "updatedAt": 1622548800000
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid article ID",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Invalid article ID"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Article not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Article not found"
                  }
                }
              }
            }
          }
        },
        "tags": ["article"]
      }
    },
    "/article/get": {
      "get": {
        "operationId": "ArticlesController_getArticles",
        "summary": "Get all articles or filter by various criteria with pagination",
        "parameters": [
          {
            "name": "title",
            "required": false,
            "in": "query",
            "description": "Filter by title (partial match)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "required": false,
            "in": "query",
            "description": "Filter by description (partial match)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "minutesRead",
            "required": false,
            "in": "query",
            "description": "Filter by minutes to read",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "generalInfo",
            "required": false,
            "in": "query",
            "description": "Filter by general information (partial match)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hashtags",
            "required": false,
            "in": "query",
            "description": "Filter by hashtags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "example": 1,
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "example": 10,
            "schema": {
              "default": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Articles retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "total": 100,
                    "page": 1,
                    "limit": 10,
                    "data": [
                      {
                        "id": "123",
                        "title": "Article Title",
                        "image": "https://example.com/image.jpg",
                        "description": "This is a description of the article.",
                        "minutesRead": 5,
                        "generalInfoFile": "media/articles-info/article.txt",
                        "hashtags": ["tech", "news"],
                        "createdAt": 1622548800000,
                        "updatedAt": 1622548800000
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Articles not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Articles not found"
                  }
                }
              }
            }
          }
        },
        "tags": ["article"]
      }
    },
    "/article/hashtags": {
      "get": {
        "operationId": "ArticlesController_getAllHashtags",
        "summary": "Get all unique hashtags",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Hashtags retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": ["tech", "news", "education"]
                }
              }
            }
          },
          "500": {
            "description": "Failed to retrieve hashtags",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": "Failed to retrieve hashtags"
                  }
                }
              }
            }
          }
        },
        "tags": ["article"]
      }
    },
    "/article/update/{id}": {
      "patch": {
        "operationId": "ArticlesController_updateArticle",
        "summary": "Update article by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Article ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateArticleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Article updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Article updated successfully",
                    "payload": {
                      "id": "UUID",
                      "title": "Title text",
                      "description": "Description text",
                      "image": "image url",
                      "minutesRead": 10,
                      "generalInfoFile": "General info file",
                      "hashtags": ["first", "second"],
                      "createdAt": "2024-08-10T10:26:19.373Z",
                      "updatedAt": "2024-08-10T10:26:19.373Z",
                      "deletedAt": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Article not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Article not found"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "title": ["Title must be a string"],
                    "image": ["Image must be a valid URL"],
                    "description": ["Description must be a string"],
                    "minutesRead": ["Minutes read must be a number"],
                    "hashtags": ["Hashtags must be an array"]
                  }
                }
              }
            }
          }
        },
        "tags": ["article"]
      }
    },
    "/article/delete/{id}": {
      "delete": {
        "operationId": "ArticlesController_deleteArticle",
        "summary": "Delete article by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Article ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Article deleted successfully"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Article not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Article not found"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": ["Invalid article ID"]
                  }
                }
              }
            }
          }
        },
        "tags": ["article"]
      }
    },
    "/courses/create": {
      "post": {
        "operationId": "CoursesController_create",
        "summary": "Create a new course",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateCourseDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Course created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Course created successfully",
                    "payload": {
                      "id": "UUID",
                      "title": "Course Title",
                      "description": "Course Description",
                      "image": "https://example.com/image.jpg",
                      "tags": ["tag1", "tag2"],
                      "finishedPercentage": 75,
                      "createdAt": "2024-08-18T10:26:19.373Z",
                      "updatedAt": "2024-08-18T10:26:19.373Z",
                      "deletedAt": null
                    }
                  }
                }
              }
            }
          },
          "302": {
            "description": "Course already exists",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 302,
                    "message": "Course already exists"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "title": ["Title must be a string"],
                    "image": ["Image is required"],
                    "description": ["Description is required"],
                    "tags": ["Tags must be an array"]
                  }
                }
              }
            }
          }
        },
        "tags": ["courses"]
      }
    },
    "/courses/get/{id}": {
      "get": {
        "operationId": "CoursesController_getCourse",
        "summary": "Get course by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Course ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Course retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "123",
                    "title": "Course Title",
                    "image": "https://example.com/image.jpg",
                    "description": "This is a description of the course.",
                    "tags": ["tag1", "tag2"],
                    "finishedPercentage": 50,
                    "createdAt": "2024-08-18T10:26:19.373Z",
                    "updatedAt": "2024-08-18T10:26:19.373Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid course ID",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Invalid course ID"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Course not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Course not found"
                  }
                }
              }
            }
          }
        },
        "tags": ["courses"]
      }
    },
    "/courses/get": {
      "get": {
        "operationId": "CoursesController_getCourses",
        "summary": "Get all courses or filter by various criteria with pagination",
        "parameters": [
          {
            "name": "title",
            "required": false,
            "in": "query",
            "description": "Filter by title (partial match)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "required": false,
            "in": "query",
            "description": "Filter by description (partial match)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "finishedPercentage",
            "required": false,
            "in": "query",
            "description": "Filter by finished percentage",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "tags",
            "required": false,
            "in": "query",
            "description": "Filter by tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "example": 1,
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "example": 10,
            "schema": {
              "default": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Courses retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "total": 100,
                    "page": 1,
                    "limit": 10,
                    "data": [
                      {
                        "id": "123",
                        "title": "Course Title",
                        "image": "https://example.com/image.jpg",
                        "description": "This is a description of the course.",
                        "tags": ["tag1", "tag2"],
                        "finishedPercentage": 50,
                        "createdAt": "2024-08-18T10:26:19.373Z",
                        "updatedAt": "2024-08-18T10:26:19.373Z"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "No courses found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "No courses found"
                  }
                }
              }
            }
          }
        },
        "tags": ["courses"]
      }
    },
    "/courses/update/{id}": {
      "patch": {
        "operationId": "CoursesController_updateCourse",
        "summary": "Update course details",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Course ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCourseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Course updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Course updated successfully",
                    "payload": {
                      "id": "UUID",
                      "title": "Updated Course Title",
                      "description": "Updated Course Description",
                      "image": "https://example.com/new-image.jpg",
                      "tags": ["newTag1", "newTag2"],
                      "finishedPercentage": 80,
                      "createdAt": "2024-08-18T10:26:19.373Z",
                      "updatedAt": "2024-08-18T10:26:19.373Z",
                      "deletedAt": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Course not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Course not found"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "title": ["Title must be a string"],
                    "description": ["Description is required"],
                    "tags": ["Tags must be an array"]
                  }
                }
              }
            }
          }
        },
        "tags": ["courses"]
      }
    },
    "/courses/delete/{id}": {
      "delete": {
        "operationId": "CoursesController_deleteCourse",
        "summary": "Delete a course by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Course ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Course deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Course deleted successfully"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Course not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Course not found"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": ["Invalid ID format"]
                  }
                }
              }
            }
          }
        },
        "tags": ["courses"]
      }
    },
    "/education-center/create": {
      "post": {
        "operationId": "EducationCenterController_create",
        "summary": "Create a new education center",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateEducationCenterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Education center created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Education center created successfully",
                    "payload": {
                      "id": "UUID",
                      "title": "Title",
                      "image": "image url",
                      "generalInfo": "info general ",
                      "city": "city",
                      "createdAt": "2024-08-10T11:50:48.555Z",
                      "updatedAt": "2024-08-10T11:50:48.555Z",
                      "deletedAt": null
                    }
                  }
                }
              }
            }
          },
          "302": {
            "description": "Education center already exists",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 302,
                    "message": "Education center already exists"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "title": ["Title must be a string"],
                    "image": ["Image is required"],
                    "generalInfo": ["General info is required"],
                    "city": ["City is required"]
                  }
                }
              }
            }
          }
        },
        "tags": ["education-center"]
      }
    },
    "/education-center/get/{id}": {
      "get": {
        "operationId": "EducationCenterController_getUniversity",
        "summary": "Get education center by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Education center ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Education center retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "UUID",
                    "title": "Name",
                    "city": "city",
                    "image": "image url",
                    "generalInfo": "General info",
                    "createdAt": "2024-08-10T10:55:58.855Z",
                    "updatedAt": "2024-08-10T10:55:58.855Z",
                    "deletedAt": null
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid education center ID",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Invalid education center ID"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Education center not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Education center not found"
                  }
                }
              }
            }
          }
        },
        "tags": ["education-center"]
      }
    },
    "/education-center/get": {
      "get": {
        "operationId": "EducationCenterController_getUsers",
        "summary": "Get education center by ID",
        "parameters": [
          {
            "name": "city",
            "required": false,
            "in": "query",
            "description": "Filter by city ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "required": false,
            "in": "query",
            "description": "Filter by title (partial match)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "example": 1,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Education center retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "total": 6,
                    "page": "1",
                    "limit": "10",
                    "data": [
                      {
                        "id": "UUID",
                        "image": "image url",
                        "title": "title",
                        "generalInfoFile": "url general info file",
                        "city": "city",
                        "createdAt": "2024-08-10T10:55:58.855Z",
                        "updatedAt": "2024-08-10T10:55:58.855Z",
                        "deletedAt": null
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid education center ID",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Invalid education center ID"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Education center not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Education center not found"
                  }
                }
              }
            }
          }
        },
        "tags": ["education-center"]
      }
    },
    "/education-center/update/{id}": {
      "patch": {
        "operationId": "EducationCenterController_updateEducationCenter",
        "summary": "Update education center by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Education center ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEducationCenterDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Education center updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Education center updated successfully",
                    "payload": {
                      "id": "UUID",
                      "title": "Title",
                      "image": "image url",
                      "generalInfo": "info general ",
                      "city": "city",
                      "createdAt": "2024-08-10T11:50:48.555Z",
                      "updatedAt": "2024-08-10T11:50:48.555Z",
                      "deletedAt": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Education center not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Education center not found"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "title": ["Title must be a string"],
                    "image": ["Image must be a valid URL"],
                    "generalInfo": ["General info must be a string"],
                    "city": ["City must be a string"]
                  }
                }
              }
            }
          }
        },
        "tags": ["education-center"]
      }
    },
    "/education-center/delete/{id}": {
      "delete": {
        "operationId": "EducationCenterController_deleteEducationCenter",
        "summary": "Delete education center by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Education center ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Education center deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Education center deleted successfully"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Education center not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Education center not found"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": ["Invalid education center ID"]
                  }
                }
              }
            }
          }
        },
        "tags": ["education-center"]
      }
    },
    "/images/upload": {
      "post": {
        "operationId": "ImageController_uploadImage",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": ["images"]
      }
    },
    "/images/get/{cid}": {
      "get": {
        "operationId": "ImageController_getImage",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": ["images"]
      }
    },
    "/lessons/create": {
      "post": {
        "operationId": "LessonsController_create",
        "summary": "Create a new lesson",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateLessonDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Lesson created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Lesson created successfully",
                    "payload": {
                      "id": "UUID",
                      "name": "Lesson Name",
                      "description": "Lesson Description",
                      "resource": "https://example.com/resource.mp4",
                      "courseId": "UUID",
                      "status": "in_progress",
                      "createdAt": "2024-08-18T10:26:19.373Z",
                      "updatedAt": "2024-08-18T10:26:19.373Z",
                      "deletedAt": null
                    }
                  }
                }
              }
            }
          },
          "302": {
            "description": "Lesson already exists",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 302,
                    "message": "Lesson already exists"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "name": ["Name must be a string"],
                    "resource": ["Resource is required"],
                    "courseId": ["Course ID is required"],
                    "status": ["Status is required"]
                  }
                }
              }
            }
          }
        },
        "tags": ["lessons"]
      }
    },
    "/lessons/get/{id}": {
      "get": {
        "operationId": "LessonsController_getLesson",
        "summary": "Get lesson by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Lesson ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lesson retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "123",
                    "name": "Lesson Name",
                    "description": "Lesson Description",
                    "resource": "https://example.com/resource.mp4",
                    "courseId": "UUID",
                    "status": "in_progress",
                    "createdAt": "2024-08-18T10:26:19.373Z",
                    "updatedAt": "2024-08-18T10:26:19.373Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid lesson ID",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Invalid lesson ID"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Lesson not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Lesson not found"
                  }
                }
              }
            }
          }
        },
        "tags": ["lessons"]
      }
    },
    "/lessons/get": {
      "get": {
        "operationId": "LessonsController_getLessons",
        "summary": "Get all lessons or filter by various criteria with pagination",
        "parameters": [
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by name (partial match)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "enum": ["lock", "in_progress", "finish"],
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "type of the lesson to filter by",
            "schema": {
              "enum": ["pdf", "video"],
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "example": 1,
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "example": 10,
            "schema": {
              "default": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lessons retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "total": 100,
                    "page": 1,
                    "limit": 10,
                    "data": [
                      {
                        "id": "123",
                        "name": "Lesson Name",
                        "description": "Lesson Description",
                        "resource": "https://example.com/resource.mp4",
                        "courseId": "UUID",
                        "status": "in_progress",
                        "createdAt": "2024-08-18T10:26:19.373Z",
                        "updatedAt": "2024-08-18T10:26:19.373Z"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "No lessons found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "No lessons found"
                  }
                }
              }
            }
          }
        },
        "tags": ["lessons"]
      }
    },
    "/lessons/update/{id}": {
      "patch": {
        "operationId": "LessonsController_updateLesson",
        "summary": "Update lesson details",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Lesson ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLessonDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Lesson updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Lesson updated successfully",
                    "payload": {
                      "id": "UUID",
                      "name": "Updated Lesson Name",
                      "description": "Updated Lesson Description",
                      "resource": "https://example.com/new-resource.mp4",
                      "courseId": "UUID",
                      "status": "completed",
                      "createdAt": "2024-08-18T10:26:19.373Z",
                      "updatedAt": "2024-08-18T10:26:19.373Z",
                      "deletedAt": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Lesson not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Lesson not found"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "name": ["Name must be a string"],
                    "resource": ["Resource is required"],
                    "status": ["Status is required"]
                  }
                }
              }
            }
          }
        },
        "tags": ["lessons"]
      }
    },
    "/lessons/delete/{id}": {
      "delete": {
        "operationId": "LessonsController_deleteLesson",
        "summary": "Delete a lesson by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Lesson ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lesson deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Lesson deleted successfully"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Lesson not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Lesson not found"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": ["Invalid ID format"]
                  }
                }
              }
            }
          }
        },
        "tags": ["lessons"]
      }
    },
    "/lessons/submit/{id}": {
      "post": {
        "operationId": "LessonsController_submitLesson",
        "summary": "Submit a lesson",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Lesson ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lesson submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "nextLessonId": "UUID",
                    "nextLessonItem": 2
                  }
                }
              }
            }
          },
          "404": {
            "description": "Lesson or next lesson not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Lesson or next lesson not found"
                  }
                }
              }
            }
          }
        },
        "tags": ["lessons"]
      }
    },
    "/lessons/by-course/{courseId}": {
      "get": {
        "operationId": "LessonsController_getLessonsByCourseId",
        "summary": "Get lessons by course ID",
        "parameters": [
          {
            "name": "courseId",
            "required": true,
            "in": "path",
            "description": "Course ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lessons retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "id": "123",
                      "item": 1,
                      "name": "Lesson Name",
                      "status": "in_progress",
                      "type": "video",
                      "createdAt": "2024-08-18T10:26:19.373Z",
                      "updatedAt": "2024-08-18T10:26:19.373Z",
                      "deletedAt": null
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid course ID",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Invalid course ID"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No lessons found for the given course ID",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "No lessons found for the given course ID"
                  }
                }
              }
            }
          }
        },
        "tags": ["lessons"]
      }
    },
    "/partner/create": {
      "post": {
        "operationId": "PartnerController_create",
        "summary": "Create a new partner",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreatePartnerDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Partner created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Partner created successfully"
                  }
                }
              }
            }
          },
          "302": {
            "description": "Partner already exists",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 302,
                    "message": "Partner already exists"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "image": ["image must be a valid URL"]
                  }
                }
              }
            }
          }
        },
        "tags": ["partner"]
      }
    },
    "/partner/get/{id}": {
      "get": {
        "operationId": "PartnerController_getPartner",
        "summary": "Get partner by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Partner ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Partner retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "123",
                    "image": "https://example.com/image1.jpg",
                    "createdAt": 1622548800000,
                    "deletedAt": 0
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Invalid partner ID"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Partner not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Partner not found"
                  }
                }
              }
            }
          }
        },
        "tags": ["partner"]
      }
    },
    "/partner/get": {
      "get": {
        "operationId": "PartnerController_getPartners",
        "summary": "Get all partners with optional filters and pagination",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "example": 1,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Partners retrieved successfully with pagination details",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "total": 11,
                    "page": 1,
                    "limit": 10,
                    "data": [
                      {
                        "id": "123",
                        "image": "https://example.com/image1.jpg",
                        "createdAt": 1622548800000,
                        "deletedAt": 0
                      },
                      {
                        "id": "124",
                        "image": "https://example.com/image2.jpg",
                        "createdAt": 1622548800000,
                        "deletedAt": 0
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "No partners found matching the filters",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "No partners found"
                  }
                }
              }
            }
          }
        },
        "tags": ["partner"]
      }
    },
    "/partner/update/{id}": {
      "patch": {
        "operationId": "PartnerController_updatePartner",
        "summary": "Update partner by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Partner ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePartnerDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Partner updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Partner updated successfully"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Partner not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Partner not found"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "image": ["image must be a valid URL"]
                  }
                }
              }
            }
          }
        },
        "tags": ["partner"]
      }
    },
    "/partner/delete/{id}": {
      "delete": {
        "operationId": "PartnerController_deletePartner",
        "summary": "Delete partner by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Partner ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Partner deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Partner deleted successfully"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Partner not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Partner not found"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": ["Invalid partner ID"]
                  }
                }
              }
            }
          }
        },
        "tags": ["partner"]
      }
    },
    "/pdf/{id}": {
      "get": {
        "operationId": "PdfController_getPdf",
        "summary": "Retrieve and display a PDF file by ID in the browser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Unique identifier for the PDF file",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The PDF file was retrieved successfully and will be displayed in the browser",
            "content": {
              "application/pdf": {}
            }
          },
          "400": {
            "description": "Invalid file ID"
          },
          "404": {
            "description": "PDF file not found"
          }
        },
        "tags": ["pdf"]
      }
    },
    "/result-modal": {
      "post": {
        "operationId": "ResultModalController_processResultModal",
        "summary": "Process result modal",
        "parameters": [
          {
            "name": "authorization",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createTestModalDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result modal processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Result modal processed successfully \"with auth\"",
                    "payload": {
                      "userId": "5492d4f7-72df-4ef7-8640-7ad3448e32a3",
                      "resultTest": [
                        0.07961358152075046, 0.10572438850781071,
                        0.06472300693776838, 0.037430474967483834,
                        0.7125085480661866
                      ],
                      "id": "d6eb7edf-afd2-495c-98bc-617326fe7f31",
                      "createdAt": "2024-08-13T02:18:08.225Z",
                      "updatedAt": "2024-08-13T02:18:08.225Z",
                      "deletedAt": null
                    },
                    "without_auth": {
                      "message": "Result modal processed successfully",
                      "info": "This data not saved because user is not authenticated",
                      "payload": [
                        0.07961358152075046, 0.10572438850781071,
                        0.06472300693776838, 0.037430474967483834,
                        0.7125085480661866
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 401,
                    "message": "Invalid token"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 500,
                    "message": "Error message"
                  }
                }
              }
            }
          }
        },
        "tags": ["result-modal"]
      }
    },
    "/result-modal/get": {
      "get": {
        "operationId": "ResultModalController_get",
        "summary": "Process result modal",
        "parameters": [
          {
            "name": "authorization",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "The userId for get result by userId",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "The page number for pagination",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of items per page for pagination",
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "The userId for get result by userId",
            "required": false,
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The page number for pagination",
            "required": false,
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "The number of items per page for pagination",
            "required": false,
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "get successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "total": 4,
                    "page": 1,
                    "limit": 10,
                    "data": [
                      {
                        "id": "20f255d9-943b-4674-be2d-a636e5d3190b",
                        "userId": "5492d4f7-72df-4ef7-8640-7ad3448e32a3",
                        "resultTest": [
                          "0.07961358152075046",
                          "0.10572438850781071",
                          "0.06472300693776838",
                          "0.037430474967483834",
                          "0.7125085480661866"
                        ],
                        "createdAt": "2024-08-13T01:45:40.793Z",
                        "updatedAt": "2024-08-13T01:45:40.793Z",
                        "deletedAt": null
                      },
                      {
                        "id": "afe864cd-b387-4d5e-9865-17e7ef300c4f",
                        "userId": "5492d4f7-72df-4ef7-8640-7ad3448e32a3",
                        "resultTest": [
                          "0.07961358152075046",
                          "0.10572438850781071",
                          "0.06472300693776838",
                          "0.037430474967483834",
                          "0.7125085480661866"
                        ],
                        "createdAt": "2024-08-13T01:45:41.931Z",
                        "updatedAt": "2024-08-13T01:45:41.931Z",
                        "deletedAt": null
                      },
                      {
                        "id": "8b767341-9cdd-4ef4-b95d-d1efd9d742e4",
                        "userId": "5492d4f7-72df-4ef7-8640-7ad3448e32a3",
                        "resultTest": [
                          "0.07961358152075046",
                          "0.10572438850781071",
                          "0.06472300693776838",
                          "0.037430474967483834",
                          "0.7125085480661866"
                        ],
                        "createdAt": "2024-08-13T01:45:43.007Z",
                        "updatedAt": "2024-08-13T01:45:43.007Z",
                        "deletedAt": null
                      },
                      {
                        "id": "21c4d0d3-86e2-49bd-803f-f701efa8d309",
                        "userId": "5492d4f7-72df-4ef7-8640-7ad3448e32a3",
                        "resultTest": [
                          "0.07961358152075046",
                          "0.10572438850781071",
                          "0.06472300693776838",
                          "0.037430474967483834",
                          "0.7125085480661866"
                        ],
                        "createdAt": "2024-08-13T01:45:44.120Z",
                        "updatedAt": "2024-08-13T01:45:44.120Z",
                        "deletedAt": null
                      },
                      {
                        "id": "c88f891f-1fc8-41fa-9e4b-1444e2f1c392",
                        "userId": "5492d4f7-72df-4ef7-8640-7ad3448e32a3",
                        "resultTest": [
                          "0.07961358152075046",
                          "0.10572438850781071",
                          "0.06472300693776838",
                          "0.037430474967483834",
                          "0.7125085480661866"
                        ],
                        "createdAt": "2024-08-13T01:45:45.868Z",
                        "updatedAt": "2024-08-13T01:45:45.868Z",
                        "deletedAt": null
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "tags": ["result-modal"]
      }
    },
    "/result-modal/get/{id}": {
      "get": {
        "operationId": "ResultModalController_getById",
        "summary": "Process result modal",
        "parameters": [
          {
            "name": "authorization",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Test ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "get successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "3a0a8292-9315-447b-86c6-e6201ad91bdf",
                    "userId": "5492d4f7-72df-4ef7-8640-7ad3448e32a3",
                    "resultTest": [
                      "0.07961358152075046",
                      "0.10572438850781071",
                      "0.06472300693776838",
                      "0.037430474967483834",
                      "0.7125085480661866"
                    ],
                    "createdAt": "2024-08-13T01:45:33.326Z",
                    "updatedAt": "2024-08-13T01:45:33.326Z",
                    "deletedAt": null
                  }
                }
              }
            }
          }
        },
        "tags": ["result-modal"]
      }
    },
    "/specialty/create": {
      "post": {
        "operationId": "SpecialtyController_createSpecialty",
        "summary": "Create a new specialty",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSpecialtyDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Specialty created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Specialty created successfully",
                    "payload": {
                      "name": "Computer Science",
                      "EIOHPE": "EIOHPE123",
                      "class": 3,
                      "specializationGroup": 2,
                      "clusterName": "Engineering",
                      "clusterTag": "ENG",
                      "specialtyDescription": "A specialization in computer science",
                      "specialtyCode": 101,
                      "specialtyName": "Bachelor of Computer Science",
                      "formOfEducation": "Full-time",
                      "typeOfStudy": "On-campus",
                      "languageOfStudy": "English",
                      "universityName": "XYZ University",
                      "monthlyIncome": 1000,
                      "skillsLevel": 5,
                      "futureGrowth": "High",
                      "overview": "An overview of the specialty",
                      "careerOpportunities": [
                        "Software Development",
                        "Data Analysis"
                      ],
                      "id": "f0294650-c31e-473e-9e48-e8a1446f10ee",
                      "createdAt": "2024-08-10T12:04:36.971Z",
                      "updatedAt": "2024-08-10T12:04:36.971Z",
                      "deletedAt": null
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "name": ["name must be a string"]
                  }
                }
              }
            }
          }
        },
        "tags": ["specialty"]
      }
    },
    "/specialty/get/{id}": {
      "get": {
        "operationId": "SpecialtyController_getById",
        "summary": "Get specialty by ID or all specialties",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "path",
            "description": "Specialty ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Specialty(s) retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "f0294650-c31e-473e-9e48-e8a1446f10ee",
                    "name": "Computer Science",
                    "EIOHPE": "EIOHPE123",
                    "class": 3,
                    "specializationGroup": 2,
                    "clusterName": "Engineering",
                    "clusterTag": "ENG",
                    "specialtyDescription": "A specialization in computer science",
                    "specialtyCode": 101,
                    "specialtyName": "Bachelor of Computer Science",
                    "formOfEducation": "Full-time",
                    "typeOfStudy": "On-campus",
                    "languageOfStudy": "English",
                    "universityName": "XYZ University",
                    "monthlyIncome": 1000,
                    "skillsLevel": 5,
                    "futureGrowth": "High",
                    "overview": "An overview of the specialty",
                    "careerOpportunities": [
                      "Software Development",
                      "Data Analysis"
                    ],
                    "createdAt": "2024-08-10T12:04:36.971Z",
                    "updatedAt": "2024-08-10T12:04:36.971Z",
                    "deletedAt": null
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Invalid specialty ID"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Specialty not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Specialty not found"
                  }
                }
              }
            }
          }
        },
        "tags": ["specialty"]
      }
    },
    "/specialty/get": {
      "get": {
        "operationId": "SpecialtyController_get",
        "summary": "Get specialty by ID or all specialties",
        "parameters": [
          {
            "example": "Computer Science",
            "description": "The name of the specialty",
            "required": false,
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": 3,
            "description": "The class level of the specialty",
            "required": false,
            "name": "class",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "example": 2,
            "description": "The specialization group of the specialty",
            "required": false,
            "name": "specializationGroup",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "example": "Engineering",
            "description": "The cluster name of the specialty",
            "required": false,
            "name": "clusterName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "ENG",
            "description": "The cluster tag of the specialty",
            "required": false,
            "name": "clusterTag",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": 101,
            "description": "The specialty code",
            "required": false,
            "name": "specialtyCode",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "example": "Bachelor of Computer Science",
            "description": "The name of the specialty",
            "required": false,
            "name": "specialtyName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "Full-time",
            "description": "The form of education",
            "required": false,
            "name": "formOfEducation",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "On-campus",
            "description": "The type of study",
            "required": false,
            "name": "typeOfStudy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "English",
            "description": "The language of study",
            "required": false,
            "name": "languageOfStudy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "XYZ University",
            "description": "The university name",
            "required": false,
            "name": "universityName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": 1000,
            "description": "The monthly income from the specialty",
            "required": false,
            "name": "monthlyIncome",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "example": ["Software Development", "Data Analysis"],
            "description": "Career opportunities available",
            "required": false,
            "name": "careerOpportunities",
            "in": "query",
            "schema": {
              "type": "array"
            }
          },
          {
            "description": "The page number for pagination",
            "required": false,
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "The number of items per page for pagination",
            "required": false,
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Specialty(s) retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "total": 1,
                    "page": "2",
                    "limit": "1",
                    "data": [
                      {
                        "id": "f0294650-c31e-473e-9e48-e8a1446f10ee",
                        "name": "Computer Science",
                        "EIOHPE": "EIOHPE123",
                        "class": 3,
                        "specializationGroup": 2,
                        "clusterName": "Engineering",
                        "clusterTag": "ENG",
                        "specialtyDescription": "A specialization in computer science",
                        "specialtyCode": 101,
                        "specialtyName": "Bachelor of Computer Science",
                        "formOfEducation": "Full-time",
                        "typeOfStudy": "On-campus",
                        "languageOfStudy": "English",
                        "universityName": "XYZ University",
                        "monthlyIncome": 1000,
                        "skillsLevel": 5,
                        "futureGrowth": "High",
                        "overview": "An overview of the specialty",
                        "careerOpportunities": [
                          "Software Development",
                          "Data Analysis"
                        ],
                        "createdAt": "2024-08-10T12:04:36.971Z",
                        "updatedAt": "2024-08-10T12:04:36.971Z",
                        "deletedAt": null
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Invalid specialty ID"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Specialty not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Specialty not found"
                  }
                }
              }
            }
          }
        },
        "tags": ["specialty"]
      }
    },
    "/specialty/update/{id}": {
      "patch": {
        "operationId": "SpecialtyController_updateSpecialty",
        "summary": "Update specialty by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Specialty ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSpecialtyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Specialty updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Specialty updated successfully",
                    "payload": {
                      "name": "Computer Science",
                      "EIOHPE": "EIOHPE123",
                      "class": 3,
                      "specializationGroup": 2,
                      "clusterName": "Engineering",
                      "clusterTag": "ENG",
                      "specialtyDescription": "A specialization in computer science",
                      "specialtyCode": 101,
                      "specialtyName": "Bachelor of Computer Science",
                      "formOfEducation": "Full-time",
                      "typeOfStudy": "On-campus",
                      "languageOfStudy": "English",
                      "universityName": "XYZ University",
                      "monthlyIncome": 1000,
                      "skillsLevel": 5,
                      "futureGrowth": "High",
                      "overview": "An overview of the specialty",
                      "careerOpportunities": [
                        "Software Development",
                        "Data Analysis"
                      ],
                      "id": "f0294650-c31e-473e-9e48-e8a1446f10ee",
                      "createdAt": "2024-08-10T12:04:36.971Z",
                      "updatedAt": "2024-08-10T12:04:36.971Z",
                      "deletedAt": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Specialty not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Specialty not found"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "name": ["name must be a string"]
                  }
                }
              }
            }
          }
        },
        "tags": ["specialty"]
      }
    },
    "/specialty/delete/{id}": {
      "delete": {
        "operationId": "SpecialtyController_deleteSpecialty",
        "summary": "Delete specialty by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Specialty ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Specialty deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Specialty deleted successfully"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Specialty not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Specialty not found"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": ["Invalid specialty ID"]
                  }
                }
              }
            }
          }
        },
        "tags": ["specialty"]
      }
    },
    "/university/create": {
      "post": {
        "operationId": "UniversityController_register",
        "summary": "Create a new university",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUniversityDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "University registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "University registered successfully",
                    "payload": {
                      "id": "UUID",
                      "name": "Name university",
                      "city": "CITY",
                      "generalInfo": "General Information",
                      "createdAt": "2024-08-09T07:55:23.499Z",
                      "updatedAt": "2024-08-09T07:55:23.499Z",
                      "deletedAt": null
                    }
                  }
                }
              }
            }
          },
          "302": {
            "description": "University already exists",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 302,
                    "message": "University already exists"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "name": ["name must be a string"],
                    "address": ["address must be a string"],
                    "contactEmail": [
                      "contactEmail must be a valid email address"
                    ]
                  }
                }
              }
            }
          }
        },
        "tags": ["university"]
      }
    },
    "/university/get/{id}": {
      "get": {
        "operationId": "UniversityController_getUniversity",
        "summary": "Get university by ID or all universities",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "path",
            "description": "University ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "University(s) retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "total": 3,
                    "page": "1",
                    "limit": "10",
                    "data": [
                      {
                        "id": "UUID",
                        "name": "Tajik National University",
                        "city": "Dushanbe",
                        "generalInfo": "General Information",
                        "createdAt": "2024-08-09T07:47:51.792Z",
                        "updatedAt": "2024-08-09T07:47:51.792Z",
                        "deletedAt": null
                      },
                      {
                        "id": "UUID",
                        "name": "Tajik National University 1",
                        "city": "Dushanbe",
                        "generalInfo": "General Information",
                        "createdAt": "2024-08-09T07:47:51.792Z",
                        "updatedAt": "2024-08-09T07:47:51.792Z",
                        "deletedAt": null
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Invalid university ID"
                  }
                }
              }
            }
          },
          "404": {
            "description": "University not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "University not found"
                  }
                }
              }
            }
          }
        },
        "tags": ["university"]
      }
    },
    "/university/get": {
      "get": {
        "operationId": "UniversityController_getUsers",
        "summary": "Get university by ID or all universities",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "path",
            "description": "University ID",
            "schema": {}
          },
          {
            "name": "city",
            "required": false,
            "in": "query",
            "description": "Filter by city ",
            "schema": {
              "enum": [
                "Dushanbe",
                "Bokhtar",
                "Kulob",
                "Vahdat",
                "Tursunzoda",
                "Panjakent",
                "Norak",
                "Danghara",
                "Farkhor",
                "Hissor",
                "Gafurov",
                "Roghun",
                "Shahritus",
                "Shahrinav",
                "Taboshar",
                "Chkalovsk",
                "Khorugh",
                "Murghab",
                "Qayroqqum",
                "Sarband",
                "Vose",
                "Asht",
                "Baljuvon",
                "Darvoz",
                "Devashtich",
                "Fayzobod",
                "Ishkoshim",
                "Jabbor Rasulov",
                "Jilikul",
                "Jirgatol",
                "Khovaling",
                "Kuhistoni Mastchoh",
                "Lakhsh",
                "Muminobod",
                "Nurobod",
                "Nosiri Khusrav",
                "Panj",
                "Rasht",
                "Roshtqala",
                "Rumi",
                "Rudaki",
                "Rushon",
                "Sangvor",
                "Shughnon",
                "Temurmalik",
                "Tojikobod",
                "Varzob",
                "Vakhsh",
                "Vanj",
                "Zafar",
                "Zarafshon",
                "Yovon",
                "Dusti",
                "Khuroson",
                "Kushoniyon",
                "Levakant",
                "Qubodiyon",
                "Balkhi",
                "Khujand",
                "Buston",
                "Ghafurov",
                "Isfara",
                "Istaravshan",
                "Konibodom",
                "Mastchoh",
                "Spitamen",
                "Zafarobod",
                "Rasulov",
                "Shahriston",
                "Ayni",
                "Penjikent"
              ],
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by name (partial match)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "example": 1,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "University(s) retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "total": 3,
                    "page": "1",
                    "limit": "10",
                    "data": [
                      {
                        "id": "UUID",
                        "name": "Tajik National University",
                        "city": "Dushanbe",
                        "generalInfo": "General Information",
                        "createdAt": "2024-08-09T07:47:51.792Z",
                        "updatedAt": "2024-08-09T07:47:51.792Z",
                        "deletedAt": null
                      },
                      {
                        "id": "UUID",
                        "name": "Tajik National University 1",
                        "city": "Dushanbe",
                        "generalInfo": "General Information",
                        "createdAt": "2024-08-09T07:47:51.792Z",
                        "updatedAt": "2024-08-09T07:47:51.792Z",
                        "deletedAt": null
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Invalid university ID"
                  }
                }
              }
            }
          },
          "404": {
            "description": "University not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "University not found"
                  }
                }
              }
            }
          }
        },
        "tags": ["university"]
      }
    },
    "/university/update/{id}": {
      "patch": {
        "operationId": "UniversityController_updateUniversity",
        "summary": "Update university by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "University ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUniversityDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "University updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "University updated successfully",
                    "payload": {
                      "id": "UUID",
                      "name": "Name university",
                      "city": "CITY",
                      "generalInfo": "General Information",
                      "createdAt": "2024-08-09T07:55:23.499Z",
                      "updatedAt": "2024-08-09T07:55:23.499Z",
                      "deletedAt": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "University not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "University not found"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "name": ["name must be a string"],
                    "address": ["address must be a string"],
                    "contactEmail": [
                      "contactEmail must be a valid email address"
                    ]
                  }
                }
              }
            }
          }
        },
        "tags": ["university"]
      }
    },
    "/university/delete/{id}": {
      "delete": {
        "operationId": "UniversityController_deleteUniversity",
        "summary": "Delete university by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "University ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "University deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "University deleted successfully"
                  }
                }
              }
            }
          },
          "404": {
            "description": "University not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "University not found"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": ["Invalid university ID"]
                  }
                }
              }
            }
          }
        },
        "tags": ["university"]
      }
    },
    "/user/create": {
      "post": {
        "operationId": "UsersController_createUser",
        "summary": "Create a new user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "User created successfully",
                    "payload": {
                      "name": "name",
                      "surname": "surname",
                      "gender": "female",
                      "role": "student",
                      "email": "email@email.email",
                      "password": "****secret****",
                      "patronymic": "patronymic",
                      "age": 22,
                      "district": "district",
                      "school": "school"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "User already exists",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 409,
                    "message": "User already exists"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "name": ["Name is required"],
                    "surname": ["Surname is required"],
                    "email": ["Email must be a valid email"],
                    "password": ["Password is required"],
                    "role": ["Role must be either student, teacher, or parents"]
                  }
                }
              }
            }
          }
        },
        "tags": ["user"]
      }
    },
    "/user/get/{id}": {
      "get": {
        "operationId": "UsersController_getUser",
        "summary": "Get user by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "123",
                    "name": "John",
                    "surname": "Doe",
                    "patronymic": "Middle",
                    "gender": "male",
                    "age": 30,
                    "district": "Dushanbe",
                    "role": "student",
                    "school": "High School",
                    "email": "john.doe@example.com",
                    "createdAt": 1622548800000,
                    "updatedAt": 1622548800000
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid user ID",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Invalid user ID"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "User not found"
                  }
                }
              }
            }
          }
        },
        "tags": ["user"]
      }
    },
    "/user/get": {
      "get": {
        "operationId": "UsersController_getUsers",
        "summary": "Get all users or filter by various criteria with pagination",
        "parameters": [
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by name (partial match)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "surname",
            "required": false,
            "in": "query",
            "description": "Filter by surname (partial match)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gender",
            "required": false,
            "in": "query",
            "description": "Filter by gender",
            "schema": {
              "enum": ["male", "female"],
              "type": "string"
            }
          },
          {
            "name": "age",
            "required": false,
            "in": "query",
            "description": "Filter by age",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "district",
            "required": false,
            "in": "query",
            "description": "Filter by district",
            "schema": {
              "enum": [
                "Dushanbe",
                "Bokhtar",
                "Kulob",
                "Vahdat",
                "Tursunzoda",
                "Panjakent",
                "Norak",
                "Danghara",
                "Farkhor",
                "Hissor",
                "Gafurov",
                "Roghun",
                "Shahritus",
                "Shahrinav",
                "Taboshar",
                "Chkalovsk",
                "Khorugh",
                "Murghab",
                "Qayroqqum",
                "Sarband",
                "Vose",
                "Asht",
                "Baljuvon",
                "Darvoz",
                "Devashtich",
                "Fayzobod",
                "Ishkoshim",
                "Jabbor Rasulov",
                "Jilikul",
                "Jirgatol",
                "Khovaling",
                "Kuhistoni Mastchoh",
                "Lakhsh",
                "Muminobod",
                "Nurobod",
                "Nosiri Khusrav",
                "Panj",
                "Rasht",
                "Roshtqala",
                "Rumi",
                "Rudaki",
                "Rushon",
                "Sangvor",
                "Shughnon",
                "Temurmalik",
                "Tojikobod",
                "Varzob",
                "Vakhsh",
                "Vanj",
                "Zafar",
                "Zarafshon",
                "Yovon",
                "Dusti",
                "Khuroson",
                "Kushoniyon",
                "Levakant",
                "Qubodiyon",
                "Balkhi",
                "Khujand",
                "Buston",
                "Ghafurov",
                "Isfara",
                "Istaravshan",
                "Konibodom",
                "Mastchoh",
                "Spitamen",
                "Zafarobod",
                "Rasulov",
                "Shahriston",
                "Ayni",
                "Penjikent"
              ],
              "type": "string"
            }
          },
          {
            "name": "role",
            "required": false,
            "in": "query",
            "description": "Filter by role",
            "schema": {
              "enum": ["student", "teacher", "parents"],
              "type": "string"
            }
          },
          {
            "name": "email",
            "required": false,
            "in": "query",
            "description": "Filter by email (partial match)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "example": 1,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "total": 100,
                    "page": 1,
                    "limit": 10,
                    "data": [
                      {
                        "id": "123",
                        "name": "John",
                        "surname": "Doe",
                        "patronymic": "Middle",
                        "gender": "male",
                        "age": 30,
                        "district": "Dushanbe",
                        "role": "student",
                        "school": "High School",
                        "email": "john.doe@example.com",
                        "createdAt": 1622548800000,
                        "updatedAt": 1622548800000
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Users not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Users not found"
                  }
                }
              }
            }
          }
        },
        "tags": ["user"]
      }
    },
    "/user/update/{id}": {
      "patch": {
        "operationId": "UsersController_updateUser",
        "summary": "Update user by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "User updated successfully"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "User not found"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "name": ["Name must be a string"],
                    "email": ["Email must be a valid email"],
                    "role": ["Role must be either student, teacher, or parents"]
                  }
                }
              }
            }
          }
        },
        "tags": ["user"]
      }
    },
    "/user/delete/{id}": {
      "delete": {
        "operationId": "UsersController_deleteUser",
        "summary": "Delete user by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "User deleted successfully"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "User not found"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": ["Invalid user ID"]
                  }
                }
              }
            }
          }
        },
        "tags": ["user"]
      }
    },
    "/user/login": {
      "post": {
        "operationId": "UsersController_login",
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "access": "your_jwt_token",
                    "refresh": "your_refresh_token"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Login failed",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "email": ["email must be a valid email address"],
                    "password": ["password must be a string"]
                  }
                }
              }
            }
          }
        },
        "tags": ["user"]
      }
    },
    "/user/verify-email": {
      "post": {
        "operationId": "UsersController_verifyEmail",
        "summary": "Verify user email with a code",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "DTO containing email and verification code",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email successfully verified",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Email successfully verified"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User or verification code not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "User or verification code not found"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "email": ["Email must be a valid email"],
                    "code": ["Code is required and must be a number"]
                  }
                }
              }
            }
          }
        },
        "tags": ["user"]
      }
    },
    "/user/send-code": {
      "post": {
        "operationId": "UsersController_sendCodeToEmail",
        "summary": "Send verification code to user email",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "DTO containing email",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendVerifyCodeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Code sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "code successfully sended"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "User not found"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "email": ["Email must be a valid email"]
                  }
                }
              }
            }
          }
        },
        "tags": ["user"]
      }
    },
    "/user/change-password": {
      "post": {
        "operationId": "UsersController_changePassword",
        "summary": "Change user password using email and verification code",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Change user password using email and verification code",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password successfully changed",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Password successfully changed"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found or code is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Email or code is incorrect"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 422,
                    "message": "Validation error"
                  }
                }
              }
            }
          }
        },
        "tags": ["user"]
      }
    },
    "/user/access-parent/{parentId}": {
      "post": {
        "operationId": "UsersController_getAccessParent",
        "summary": "Grant access to parent for specific user actions",
        "parameters": [
          {
            "name": "parentId",
            "required": true,
            "in": "path",
            "description": "The ID of the parent to grant access to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Parent access successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Parent access successfully added."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to missing or invalid token, or parent not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": "Token is missing or invalid."
                  }
                }
              }
            }
          }
        },
        "tags": ["user"]
      }
    },
    "/videos/upload": {
      "post": {
        "operationId": "VideoController_uploadVideo",
        "summary": "Upload a video file",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "The video file to upload",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "$ref": "#/components/schemas/"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The CID of the uploaded video",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Error uploading video"
          }
        },
        "tags": ["videos"]
      }
    },
    "/videos/play/{cid}": {
      "get": {
        "operationId": "VideoController_playVideo",
        "summary": "Play a video file by CID",
        "parameters": [
          {
            "name": "cid",
            "required": true,
            "in": "path",
            "description": "The CID of the video file",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The video file",
            "content": {
              "video/mp4": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Video not found"
          }
        },
        "tags": ["videos"]
      }
    }
  },
  "info": {
    "title": "Career API",
    "description": "The Career API documentation",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "CreateArticleDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the article"
          },
          "description": {
            "type": "string",
            "description": "The description of the article"
          },
          "image": {
            "type": "string",
            "format": "binary",
            "description": "The image file of the article"
          },
          "minutesRead": {
            "type": "integer",
            "description": "Minutes to read the article"
          },
          "generalInfo": {
            "type": "string",
            "description": "General information about the article"
          },
          "hashtags": {
            "type": "string",
            "description": "List of hashtags associated with the article, as a comma-separated string",
            "example": "hashtag1, hashtag2, hashtag3"
          }
        },
        "required": [
          "title",
          "description",
          "image",
          "minutesRead",
          "generalInfo",
          "hashtags"
        ]
      },
      "UpdateArticleDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the article"
          },
          "description": {
            "type": "string",
            "description": "The description of the article"
          },
          "image": {
            "type": "string",
            "format": "binary",
            "description": "The image file of the article"
          },
          "minutesRead": {
            "type": "integer",
            "description": "Minutes to read the article"
          },
          "generalInfo": {
            "type": "string",
            "description": "General information about the article"
          },
          "hashtags": {
            "description": "List of hashtags associated with the article",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateCourseDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the course"
          },
          "description": {
            "type": "string",
            "description": "The description of the course"
          },
          "image": {
            "type": "string",
            "format": "binary",
            "description": "The image file of the course"
          },
          "finishedPercentage": {
            "type": "integer",
            "description": "Finished percentage of the course"
          },
          "tags": {
            "type": "string",
            "description": "Tags associated with the course, as a comma-separated string",
            "example": "tag1, tag2, tag3"
          }
        },
        "required": [
          "title",
          "description",
          "image",
          "finishedPercentage",
          "tags"
        ]
      },
      "UpdateCourseDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the course"
          },
          "description": {
            "type": "string",
            "description": "The description of the course"
          },
          "image": {
            "type": "string",
            "format": "binary",
            "description": "The image file of the course"
          },
          "finishedPercentage": {
            "type": "integer",
            "description": "Finished percentage of the course"
          },
          "tags": {
            "description": "Tags associated with the course",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateEducationCenterDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the education center"
          },
          "image": {
            "type": "string",
            "format": "binary",
            "description": "The image file of the education center"
          },
          "generalInfo": {
            "type": "string",
            "description": "The general information about the education center"
          },
          "city": {
            "type": "string",
            "description": "The city where the education center is located"
          }
        },
        "required": ["title", "image", "generalInfo", "city"]
      },
      "UpdateEducationCenterDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the education center"
          },
          "image": {
            "type": "string",
            "format": "binary",
            "description": "The image file of the education center"
          },
          "generalInfo": {
            "type": "string",
            "description": "The general information about the education center"
          },
          "city": {
            "type": "string",
            "description": "The city where the education center is located"
          }
        }
      },
      "CreateLessonDto": {
        "type": "object",
        "properties": {
          "courseId": {
            "type": "string",
            "description": "The course ID to which the lesson belongs"
          },
          "name": {
            "type": "string",
            "description": "The name of the lesson"
          },
          "description": {
            "type": "string",
            "description": "The description of the lesson"
          },
          "resource": {
            "type": "string",
            "description": "The resource file associated with the lesson",
            "format": "binary"
          }
        },
        "required": ["courseId", "name", "description", "resource"]
      },
      "UpdateLessonDto": {
        "type": "object",
        "properties": {
          "courseId": {
            "type": "string",
            "description": "The course ID to which the lesson belongs"
          },
          "name": {
            "type": "string",
            "description": "The name of the lesson"
          },
          "description": {
            "type": "string",
            "description": "The description of the lesson"
          },
          "resource": {
            "type": "string",
            "description": "The resource file associated with the lesson",
            "format": "binary"
          }
        }
      },
      "CreatePartnerDto": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string",
            "description": "The image file for the partner.",
            "format": "binary"
          }
        },
        "required": ["image"]
      },
      "UpdatePartnerDto": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string",
            "description": "The updated image file for the partner.",
            "format": "binary"
          }
        },
        "required": ["image"]
      },
      "createTestModalDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Sample Name",
            "description": "The name"
          },
          "first": {
            "example": [
              1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 4, 3, 3, 4, 4, 4, 4, 4, 4,
              4, 4, 4, 4, 4, 4, 4, 4, 4
            ],
            "description": "Array of numbers",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "second": {
            "example": [
              "Chemistry",
              "Botany",
              "Advice on work",
              "Helping families in need",
              "Doktor",
              "Music",
              "Physics",
              "Education",
              "Artist / Folk Crafts",
              "Child care",
              "Landscaping",
              "Travel agent",
              "Picture description",
              "The nurse of mercy",
              "Economist",
              "Geology",
              "Economist",
              "Helping patients in the hospital"
            ],
            "description": "Array of strings",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "third": {
            "type": "string",
            "example": "We had money for food, but buying clothes was a big problem for us",
            "description": "A string value"
          },
          "fourth": {
            "type": "string",
            "example": "Work as an employee or assistant on a farm (farm, h",
            "description": "A string value"
          },
          "fifth": {
            "type": "string",
            "example": "I don't know / Rejection",
            "description": "A string value"
          },
          "sixth": {
            "type": "string",
            "example": "Does not work due to limited physical ability or illness",
            "description": "A string value"
          },
          "seventh": {
            "type": "string",
            "example": "Higher education (University, Conservatory, Academy) or Postgraduate studies, etc",
            "description": "A string value"
          },
          "time_spent": {
            "type": "number",
            "example": 120,
            "description": "Time spent"
          }
        },
        "required": [
          "name",
          "first",
          "second",
          "third",
          "fourth",
          "fifth",
          "sixth",
          "seventh",
          "time_spent"
        ]
      },
      "CreateSpecialtyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Computer Science",
            "description": "The name of the specialty"
          },
          "EIOHPE": {
            "type": "string",
            "example": "EIOHPE123",
            "description": "Educational institutions of higher professional education"
          },
          "class": {
            "type": "number",
            "example": 3,
            "description": "The class level of the specialty"
          },
          "specializationGroup": {
            "type": "number",
            "example": 2,
            "description": "The specialization group of the specialty"
          },
          "clusterName": {
            "type": "string",
            "example": "Engineering",
            "description": "The cluster name of the specialty"
          },
          "clusterTag": {
            "type": "string",
            "example": "ENG",
            "description": "The cluster tag of the specialty"
          },
          "specialtyDescription": {
            "type": "string",
            "example": "A specialization in computer science",
            "description": "The description of the specialty"
          },
          "specialtyCode": {
            "type": "number",
            "example": 101,
            "description": "The specialty code"
          },
          "specialtyName": {
            "type": "string",
            "example": "Bachelor of Computer Science",
            "description": "The name of the specialty"
          },
          "formOfEducation": {
            "type": "string",
            "example": "Full-time",
            "description": "The form of education"
          },
          "typeOfStudy": {
            "type": "string",
            "example": "On-campus",
            "description": "The type of study"
          },
          "languageOfStudy": {
            "type": "string",
            "example": "English",
            "description": "The language of study"
          },
          "universityName": {
            "type": "string",
            "example": "XYZ University",
            "description": "The university name"
          },
          "monthlyIncome": {
            "type": "number",
            "example": 1000,
            "description": "The monthly income from the specialty"
          },
          "skillsLevel": {
            "type": "number",
            "example": 5,
            "description": "The skills level required for the specialty"
          },
          "futureGrowth": {
            "type": "string",
            "example": "High",
            "description": "Future growth opportunities for the specialty"
          },
          "overview": {
            "type": "string",
            "example": "An overview of the specialty",
            "description": "The overview of the specialty"
          },
          "careerOpportunities": {
            "example": ["Software Development", "Data Analysis"],
            "description": "Career opportunities available",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "EIOHPE",
          "class",
          "specializationGroup",
          "clusterName",
          "clusterTag",
          "specialtyDescription",
          "specialtyCode",
          "specialtyName",
          "formOfEducation",
          "typeOfStudy",
          "languageOfStudy",
          "universityName",
          "monthlyIncome",
          "skillsLevel",
          "futureGrowth",
          "overview",
          "careerOpportunities"
        ]
      },
      "UpdateSpecialtyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Computer Science",
            "description": "The name of the specialty"
          },
          "EIOHPE": {
            "type": "string",
            "example": "EIOHPE123",
            "description": "Educational institutions of higher professional education"
          },
          "class": {
            "type": "number",
            "example": 3,
            "description": "The class level of the specialty"
          },
          "specializationGroup": {
            "type": "number",
            "example": 2,
            "description": "The specialization group of the specialty"
          },
          "clusterName": {
            "type": "string",
            "example": "Engineering",
            "description": "The cluster name of the specialty"
          },
          "clusterTag": {
            "type": "string",
            "example": "ENG",
            "description": "The cluster tag of the specialty"
          },
          "specialtyDescription": {
            "type": "string",
            "example": "A specialization in computer science",
            "description": "The description of the specialty"
          },
          "specialtyCode": {
            "type": "number",
            "example": 101,
            "description": "The specialty code"
          },
          "specialtyName": {
            "type": "string",
            "example": "Bachelor of Computer Science",
            "description": "The name of the specialty"
          },
          "formOfEducation": {
            "type": "string",
            "example": "Full-time",
            "description": "The form of education"
          },
          "typeOfStudy": {
            "type": "string",
            "example": "On-campus",
            "description": "The type of study"
          },
          "languageOfStudy": {
            "type": "string",
            "example": "English",
            "description": "The language of study"
          },
          "universityName": {
            "type": "string",
            "example": "XYZ University",
            "description": "The university name"
          },
          "monthlyIncome": {
            "type": "number",
            "example": 1000,
            "description": "The monthly income from the specialty"
          },
          "skillsLevel": {
            "type": "number",
            "example": 5,
            "description": "The skills level required for the specialty"
          },
          "futureGrowth": {
            "type": "string",
            "example": "High",
            "description": "Future growth opportunities for the specialty"
          },
          "overview": {
            "type": "string",
            "example": "An overview of the specialty",
            "description": "The overview of the specialty"
          },
          "careerOpportunities": {
            "example": ["Software Development", "Data Analysis"],
            "description": "Career opportunities available",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateUniversityDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Tajik National University",
            "description": "The name of the university"
          },
          "city": {
            "type": "string",
            "example": "Dushanbe",
            "description": "The city of the university",
            "enum": [
              "Dushanbe",
              "Bokhtar",
              "Kulob",
              "Vahdat",
              "Tursunzoda",
              "Panjakent",
              "Norak",
              "Danghara",
              "Farkhor",
              "Hissor",
              "Gafurov",
              "Roghun",
              "Shahritus",
              "Shahrinav",
              "Taboshar",
              "Chkalovsk",
              "Khorugh",
              "Murghab",
              "Qayroqqum",
              "Sarband",
              "Vose",
              "Asht",
              "Baljuvon",
              "Darvoz",
              "Devashtich",
              "Fayzobod",
              "Ishkoshim",
              "Jabbor Rasulov",
              "Jilikul",
              "Jirgatol",
              "Khovaling",
              "Kuhistoni Mastchoh",
              "Lakhsh",
              "Muminobod",
              "Nurobod",
              "Nosiri Khusrav",
              "Panj",
              "Rasht",
              "Roshtqala",
              "Rumi",
              "Rudaki",
              "Rushon",
              "Sangvor",
              "Shughnon",
              "Temurmalik",
              "Tojikobod",
              "Varzob",
              "Vakhsh",
              "Vanj",
              "Zafar",
              "Zarafshon",
              "Yovon",
              "Dusti",
              "Khuroson",
              "Kushoniyon",
              "Levakant",
              "Qubodiyon",
              "Balkhi",
              "Khujand",
              "Buston",
              "Ghafurov",
              "Isfara",
              "Istaravshan",
              "Konibodom",
              "Mastchoh",
              "Spitamen",
              "Zafarobod",
              "Rasulov",
              "Shahriston",
              "Ayni",
              "Penjikent"
            ]
          },
          "generalInfo": {
            "type": "string",
            "example": "general_info.pdf",
            "description": "The general info file of the university"
          }
        },
        "required": ["name", "generalInfo"]
      },
      "UpdateUniversityDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Tajik National University",
            "description": "The name of the university"
          },
          "city": {
            "type": "string",
            "example": "Dushanbe",
            "description": "The city of the university",
            "enum": [
              "Dushanbe",
              "Bokhtar",
              "Kulob",
              "Vahdat",
              "Tursunzoda",
              "Panjakent",
              "Norak",
              "Danghara",
              "Farkhor",
              "Hissor",
              "Gafurov",
              "Roghun",
              "Shahritus",
              "Shahrinav",
              "Taboshar",
              "Chkalovsk",
              "Khorugh",
              "Murghab",
              "Qayroqqum",
              "Sarband",
              "Vose",
              "Asht",
              "Baljuvon",
              "Darvoz",
              "Devashtich",
              "Fayzobod",
              "Ishkoshim",
              "Jabbor Rasulov",
              "Jilikul",
              "Jirgatol",
              "Khovaling",
              "Kuhistoni Mastchoh",
              "Lakhsh",
              "Muminobod",
              "Nurobod",
              "Nosiri Khusrav",
              "Panj",
              "Rasht",
              "Roshtqala",
              "Rumi",
              "Rudaki",
              "Rushon",
              "Sangvor",
              "Shughnon",
              "Temurmalik",
              "Tojikobod",
              "Varzob",
              "Vakhsh",
              "Vanj",
              "Zafar",
              "Zarafshon",
              "Yovon",
              "Dusti",
              "Khuroson",
              "Kushoniyon",
              "Levakant",
              "Qubodiyon",
              "Balkhi",
              "Khujand",
              "Buston",
              "Ghafurov",
              "Isfara",
              "Istaravshan",
              "Konibodom",
              "Mastchoh",
              "Spitamen",
              "Zafarobod",
              "Rasulov",
              "Shahriston",
              "Ayni",
              "Penjikent"
            ]
          },
          "generalInfo": {
            "type": "string",
            "example": "general_info.pdf",
            "description": "The general info file of the university"
          }
        }
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the user"
          },
          "surname": {
            "type": "string",
            "description": "The surname of the user"
          },
          "patronymic": {
            "type": "string",
            "description": "The patronymic of the user"
          },
          "gender": {
            "type": "string",
            "description": "The gender of the user",
            "enum": ["male", "female"]
          },
          "age": {
            "type": "number",
            "description": "The age of the user"
          },
          "district": {
            "type": "string",
            "description": "The district of the user",
            "enum": [
              "Dushanbe",
              "Bokhtar",
              "Kulob",
              "Vahdat",
              "Tursunzoda",
              "Panjakent",
              "Norak",
              "Danghara",
              "Farkhor",
              "Hissor",
              "Gafurov",
              "Roghun",
              "Shahritus",
              "Shahrinav",
              "Taboshar",
              "Chkalovsk",
              "Khorugh",
              "Murghab",
              "Qayroqqum",
              "Sarband",
              "Vose",
              "Asht",
              "Baljuvon",
              "Darvoz",
              "Devashtich",
              "Fayzobod",
              "Ishkoshim",
              "Jabbor Rasulov",
              "Jilikul",
              "Jirgatol",
              "Khovaling",
              "Kuhistoni Mastchoh",
              "Lakhsh",
              "Muminobod",
              "Nurobod",
              "Nosiri Khusrav",
              "Panj",
              "Rasht",
              "Roshtqala",
              "Rumi",
              "Rudaki",
              "Rushon",
              "Sangvor",
              "Shughnon",
              "Temurmalik",
              "Tojikobod",
              "Varzob",
              "Vakhsh",
              "Vanj",
              "Zafar",
              "Zarafshon",
              "Yovon",
              "Dusti",
              "Khuroson",
              "Kushoniyon",
              "Levakant",
              "Qubodiyon",
              "Balkhi",
              "Khujand",
              "Buston",
              "Ghafurov",
              "Isfara",
              "Istaravshan",
              "Konibodom",
              "Mastchoh",
              "Spitamen",
              "Zafarobod",
              "Rasulov",
              "Shahriston",
              "Ayni",
              "Penjikent"
            ]
          },
          "role": {
            "type": "string",
            "description": "The role of the user",
            "enum": ["student", "teacher", "parents"]
          },
          "school": {
            "type": "string",
            "description": "The school of the user"
          },
          "email": {
            "type": "string",
            "description": "The email of the user"
          },
          "password": {
            "type": "string",
            "description": "The password of the user"
          }
        },
        "required": ["name", "surname", "gender", "role", "email", "password"]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the user"
          },
          "surname": {
            "type": "string",
            "description": "The surname of the user"
          },
          "patronymic": {
            "type": "string",
            "description": "The patronymic of the user"
          },
          "gender": {
            "type": "string",
            "description": "The gender of the user",
            "enum": ["male", "female"]
          },
          "age": {
            "type": "number",
            "description": "The age of the user"
          },
          "district": {
            "type": "string",
            "description": "The district of the user",
            "enum": [
              "Dushanbe",
              "Bokhtar",
              "Kulob",
              "Vahdat",
              "Tursunzoda",
              "Panjakent",
              "Norak",
              "Danghara",
              "Farkhor",
              "Hissor",
              "Gafurov",
              "Roghun",
              "Shahritus",
              "Shahrinav",
              "Taboshar",
              "Chkalovsk",
              "Khorugh",
              "Murghab",
              "Qayroqqum",
              "Sarband",
              "Vose",
              "Asht",
              "Baljuvon",
              "Darvoz",
              "Devashtich",
              "Fayzobod",
              "Ishkoshim",
              "Jabbor Rasulov",
              "Jilikul",
              "Jirgatol",
              "Khovaling",
              "Kuhistoni Mastchoh",
              "Lakhsh",
              "Muminobod",
              "Nurobod",
              "Nosiri Khusrav",
              "Panj",
              "Rasht",
              "Roshtqala",
              "Rumi",
              "Rudaki",
              "Rushon",
              "Sangvor",
              "Shughnon",
              "Temurmalik",
              "Tojikobod",
              "Varzob",
              "Vakhsh",
              "Vanj",
              "Zafar",
              "Zarafshon",
              "Yovon",
              "Dusti",
              "Khuroson",
              "Kushoniyon",
              "Levakant",
              "Qubodiyon",
              "Balkhi",
              "Khujand",
              "Buston",
              "Ghafurov",
              "Isfara",
              "Istaravshan",
              "Konibodom",
              "Mastchoh",
              "Spitamen",
              "Zafarobod",
              "Rasulov",
              "Shahriston",
              "Ayni",
              "Penjikent"
            ]
          },
          "role": {
            "type": "string",
            "description": "The role of the user",
            "enum": ["student", "teacher", "parents"]
          },
          "school": {
            "type": "string",
            "description": "The school of the user"
          },
          "email": {
            "type": "string",
            "description": "The email of the user"
          },
          "password": {
            "type": "string",
            "description": "The password of the user"
          }
        }
      },
      "LoginUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john.doe@example.com",
            "description": "The email of the user"
          },
          "password": {
            "type": "string",
            "example": "password123",
            "description": "The password of the user"
          }
        },
        "required": ["email", "password"]
      },
      "VerifyEmailDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john.doe@example.com",
            "description": "The email of the user"
          },
          "code": {
            "type": "number",
            "example": 1234,
            "description": "The number of the user email"
          }
        },
        "required": ["email", "code"]
      },
      "SendVerifyCodeDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john.doe@example.com",
            "description": "The email of the user"
          }
        },
        "required": ["email"]
      },
      "ChangePasswordDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john.doe@example.com",
            "description": "The email of the user"
          },
          "code": {
            "type": "number",
            "example": 1234,
            "description": "The number of the user email"
          },
          "newPassword": {
            "type": "string",
            "example": "password!@#$",
            "description": "New password user"
          }
        },
        "required": ["email", "code", "newPassword"]
      }
    }
  }
}
